{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
  node.bundle|clean_class,
  node.isPromoted() ? 'is-promoted',
  node.isSticky() ? 'is-sticky',
  not node.isPublished() ? 'is-unpublished',
  view_mode ? view_mode|clean_class,
  'clearfix',
] %}

{{ attach_library('wdi_theme/addthis') }}

{% if content.field_promo_price|render|striptags|trim is not empty %}
  {% set promoClass = 'has-promo' %}
{% endif %}
<div{{ attributes.addClass(classes) }}>
  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="sr-only">
      {{ author_picture }}
      <div{{ author_attributes.addClass('author') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}
  <div{{ content_attributes.addClass('content') }}>
    <div id="program">
      {{ content.field_program }}
    </div>
    <section id="booking" class="c-paragraph booking" data-aos="fade-up">
      <div class="container">
        <div class="row">
          <div class="col-sm-12 col-md-8 col-md-offset-2">
            <h2 class="sr-only">{{ 'Book now'|t }}</h2>
            <div class="booking__content">
              <div class="booking__item booking_price {{ promoClass }}">
                <h3 class="h4">{{ 'Price'|t }}</h3>
                {{ content.field_offer_price }}
                {% if content.field_promo_price|render|striptags|trim is not empty %}
                  {{ content.field_promo_price }}
                {% endif %}
              </div>
              {% if content.field_offer_end|render|striptags|trim is not empty %}
                <div class="booking__item booking__validity">
                  <h3 class="h4">{{ 'Validity'|t }}</h3>
                  {{ content.field_offer_end }}
                </div>
              {% endif %}
            </div>
            <div class="booking__footer">
              {% if content.field_button|render|striptags|trim is not empty %}
                <div class="booking__footer__item">
                  <button class="btn btn-primary btn-100" data-toggle="modal" data-target="#bookingModal">
                    <div class="icon-wrapper">
                      <svg class="icon">
                        <use xlink:href="/sites/default/themes/custom/wdi_theme/images/svg-sprite.svg#arrow"></use>
                      </svg>
                    </div>
                    <span class="btn__text">{{ 'Book now'|t }}</span>
                  </button>
                </div>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </section>
    {% if content.field_media_image_multiple|render is not empty %}
      {{ content.field_media_image_multiple }}
    {% endif %}

    {{ content|without('body','field_buttons', 'field_media_image', 'field_video', 'field_department', 'field_button', 'field_offer_end', 'field_offer_price', 'field_promo_price', 'field_media_image_multiple', 'field_program') }}

    {# ADDTHIS #}
    <div class="c-node-share">
      <div class="container">
        <div class="row">
          <div class="col-sm-12">
            <div class="block-addthis">
              <div class="addthis_inline_share_toolbox"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="related_offers">
      {{ drupal_entity('block', 'latest_offers_with_taxo') }}
    </div>
  </div>
</div>
<div class="modal fade" id="bookingModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
            aria-hidden="true">&times;</span></button>
        <h4 class="modal-title">{{ 'How to book'|t }}&nbsp;&#63;</h4>
      </div>
      <div class="modal-body">
        {{ content.field_program.0['#paragraph'].fields.field_body.value|raw }}
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">
          <span class="btn__text">{{ 'Close'|t }}</span>
        </button>
        {% if content.field_button|render|striptags|trim is not empty %}
          {{ content.field_button }}
        {% endif %}
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
