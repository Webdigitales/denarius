{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'c-paragraph-menu'
] %}
{% block paragraph %}
  {% block content %}
    <div id="paragraph_{{ paragraph.id() }}" {{ attributes.addClass(classes) }}>
      <div class="container">
        <div class="row">
          <div class="col-sm-10 col-sm-offset-1">
            <h2 class="text-center">{{ 'The menu'|t }}</h2>
            <div class="paragraph__content">
              {{ content|without('field_menu_item') }}
              <!-- Nav tabs -->
              <ul class="nav nav-tabs" role="tablist">
                {% for key,item in content.field_menu_item if key|first != '#' %}
                  <li role="presentation" {% if key == "0" %}class="active"{% endif %}>
                    <a href="#{{ item['#paragraph'].field_title.0.value|lower|replace({' ': ''}) }}"
                       aria-controls="{{ item['#paragraph'].field_title.0.value|lower|replace({' ': ''}) }}" role="tab"
                       data-toggle="tab">{{ item['#paragraph'].field_title.0.value }}</a>
                  </li>
                {% endfor %}
              </ul>
              <!-- Tab panes -->
              <div class="tab-content">
                {% for key,item in content.field_menu_item if key|first != '#' %}
                  <div role="tabpanel" class="tab-pane {% if key == "0" %}active{% endif %}"
                       id="{{ item['#paragraph'].field_title.0.value|lower|replace({' ': ''}) }}">
                    {{ item['#paragraph'].field_body.0.value|raw }}
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  {% endblock %}
{% endblock paragraph %}
